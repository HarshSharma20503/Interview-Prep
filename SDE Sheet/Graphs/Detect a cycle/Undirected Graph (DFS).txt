Ques :- Given an undirected graph with V vertices and E edges, check whether it contains any cycle or not. 

Solution :-
Time Complexity - O(N + 2E) + O(N), Where N = Nodes, 2E is for total degrees as we traverse all adjacent nodes. 
In the case of connected components of a graph, it will take another O(N) time.
Space Complexity - O(N) + O(N) ~ O(N), Space for recursive stack space and visited array.

class Solution {
    bool dfs(int node, int parent, int vis[], vector<int> adj[]) {
        vis[node] = 1; 
        for(auto adjacentNode: adj[node]) {
            if(!vis[adjacentNode]) {
                if(dfs(adjacentNode, node, vis, adj) == true) 
                    return true; 
            }
            else if(adjacentNode != parent) return true; 
        }
        return false; 
    }
  public:
    bool isCycle(int V, vector<int> adj[]) {
       int vis[V] = {0}; 
       for(int i = 0;i<V;i++)
           if(!vis[i])
               if(dfs(i, -1, vis, adj) == true) return true; 
       return false; 
    }
};