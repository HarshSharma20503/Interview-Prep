Ques :- Given an undirected graph, return a vector of all nodes by traversing the graph using depth-first search (DFS).

Solution :- 
Time Complexity - For an undirected graph, O(N) + O(2E), For a directed graph, O(N) + O(E), 
Because for every node we are calling the recursive function once,
the time taken is O(N) and 2E is for total degrees as we traverse for all adjacent nodes 
Space Complexity - O(3N) ~ O(N), Space for dfs stack space, visited array and an adjacency list

class Solution {
  private: 
    void dfs(int node, vector<int> adj[], int vis[], vector<int> &ls) {
        vis[node] = 1; 
        ls.push_back(node); 
        for(auto it : adj[node])
            if(!vis[it])
                dfs(it, adj, vis, ls); 
    }
  public:
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        int vis[V] = {0}; 
        int start = 0;
        vector<int> ls; 
        dfs(start, adj, vis, ls); 
        return ls; 
    }
};