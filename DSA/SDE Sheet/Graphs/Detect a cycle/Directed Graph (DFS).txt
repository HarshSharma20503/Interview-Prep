Ques :- Given a directed graph with V vertices and E edges, check whether it contains any cycle or not.

Solution :-
Time Complexity - O(V+E)+O(V) , where V = no. of nodes and E = no. of edges. 
There can be at most V components. So, another O(V) time complexity.
Space Complexity - O(2N) + O(N) ~ O(2N): O(2N) for two visited arrays and O(N) for recursive stack space.

class Solution {
	bool dfsCheck(int node, vector<int> adj[], int vis[], int pathVis[]) {
		vis[node] = 1;
		pathVis[node] = 1;
		for (auto it : adj[node]) {
			if (!vis[it]) {
				if (dfsCheck(it, adj, vis, pathVis) == true)
					return true;
			}
			else if (pathVis[it])
				return true;
		}
		pathVis[node] = 0;
		return false;
	}
public:
	bool isCyclic(int V, vector<int> adj[]) {
		int vis[V] = {0};
		int pathVis[V] = {0};
		for (int i = 0; i < V; i++) {
			if (!vis[i])
				if (dfsCheck(i, adj, vis, pathVis) == true) return true;
		}
		return false;
	}
};