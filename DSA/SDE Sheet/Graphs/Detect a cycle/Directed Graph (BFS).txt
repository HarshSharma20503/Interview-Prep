Ques :- Given a Directed Graph with V vertices and E edges, check whether it contains any cycle or not.

Solution :-
Time Complexity - O(V+E), where V = no. of nodes and E = no. of edges. This is a simple BFS algorithm.
Space Complexity - O(N) + O(N) ~ O(2N), O(N) for the in-degree array, and O(N) for the queue 
data structure used in BFS(where N = no.of nodes).


bool isCyclic(int V, vector<int> adj[]) {
    int indegree[V] = {0};
    for (int i = 0; i < V; i++) {
        for (auto it : adj[i]) {
            indegree[it]++;
        }
    }
    queue<int> q;
    for (int i = 0; i < V; i++) {
        if (indegree[i] == 0) {
            q.push(i);
        }
    }
    int cnt = 0;
    while (!q.empty()) {
        int node = q.front();
        q.pop();
        cnt++;
        for (auto it : adj[node]) {
            indegree[it]--;
            if (indegree[it] == 0) q.push(it);
        }
    }
    if (cnt == V) return false;
    return true;
}